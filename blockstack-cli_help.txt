Command: announce
Usage:
  announce MESSAGE_HASH OWNER_KEY 
  announce --message_hash ZONEFILE_HASH
           --owner_key PRIVATE_KEY
           
  Broadcast a message on the blockchain for subscribers to read. The 
  `MESSAGE_HASH` argument must be the hash of a previously-announced zone 
  file. The `OWNER_KEY` used to sign the transaction must correspond to the 
  Blockstack ID to which other users have already subscribed. `OWNER_KEY` can 
  be a single private key or a serialized multisig private key bundle. 

  If this command succeeds, it will print a transaction ID. The rest of the 
  Blockstack peer network will process it once the transaction reaches 7 
  confirmations. 

  Examples: 

    $ # Tip: You can obtain the owner key with the get_owner_keys command
    $ export OWNER_KEY="136ff26efa5db6f06b28f9c8c7a0216a1a52598045162abfe435d13036154a1b01"
    $ blockstack-cli announce 737c631c7c5d911c6617993c21fba731363f1cfe "$OWNER_KEY"
    d51749aeec2803e91a2f8bdec8d3e413491fd816b4962372b214ab74acb0bba8

    $ export OWNER_KEY="2,136ff26efa5db6f06b28f9c8c7a0216a1a52598045162abfe435d13036154a1b01,1885cba486a42960499d1f137ef3a475725ceb11f45d74631f9928280196f67401,2418981c7f3a91d4467a65a518e14fafa30e07e6879c11fab7106ea72b49a7cb01"
    $ blockstack-cli announce 737c631c7c5d911c6617993c21fba731363f1cfe "$OWNER_KEY"
    8136a1114098893b28a693e8d84451abf99ee37ef8766f4bc59808eed76968c9

Command: authenticator
Usage:
  authenticator APP_GAIA_HUB BACKUP_PHRASE [PROFILE_GAIA_HUB] [PORT] 
  authenticator --app_gaia_hub URL
                --backup_phrase 12_WORDS_OR_CIPHERTEXT
                [--profile_gaia_hub URL]
                [--port PORTNUM]
                
  Run an authentication endpoint for the set of names owned by the given 
  backup phrase. Send applications the given Gaia hub URL on sign-in, so the 
  application will use it to read/write user data. 

  You can supply your encrypted backup phrase instead of the raw backup 
  phrase. If so, then you will be prompted for your password before any 
  authentication takes place. 

  Example: 

    $ export BACKUP_PHRASE="oak indicate inside poet please share dinner monitor glow hire source perfect"
    $ export APP_GAIA_HUB="https://1.2.3.4"
    $ export PROFILE_GAIA_HUB="https://hub.blockstack.org"
    $ blockstack-cli authenticator "$APP_GAIA_HUB" "$BACKUP_PHRASE" "$PROFILE_GAIA_HUB" 8888
    Press Ctrl+C to exit
    Authentication server started on 8888

Command: balance
Usage:
  balance ADDRESS 
  balance --address ADDRESS
          
  Query the balance of an account. Returns the balances of each kind of token 
  that the account owns. The balances will be in the *smallest possible 
  units* of the token (i.e. satoshis for BTC, microStacks for Stacks, etc.). 

  Example: 

    $ blockstack-cli balance 16pm276FpJYpm7Dv3GEaRqTVvGPTdceoY4
    {
      "BTC": "123456"
      "STACKS": "123456"
    }
    $ blockstack-cli balance SPZY1V53Z4TVRHHW9Z7SFG8CZNRAG7BD8WJ6SXD0
    {
      "BTC": "123456"
      "STACKS": "123456"
    }

Command: convert_address
Usage:
  convert_address ADDRESS 
  convert_address --address ADDRESS
                  
  Convert a Bitcoin address to a Stacks address and vice versa. 

  Example: 

    $ blockstack-cli convert_address 12qdRgXxgNBNPnDeEChy3fYTbSHQ8nfZfD
    {
      "STACKS": "SPA2MZWV9N67TBYVWTE0PSSKMJ2F6YXW7CBE6YPW",
      "BTC": "12qdRgXxgNBNPnDeEChy3fYTbSHQ8nfZfD"
    }
    $ blockstack-cli convert_address SPA2MZWV9N67TBYVWTE0PSSKMJ2F6YXW7CBE6YPW
    {
      "STACKS": "SPA2MZWV9N67TBYVWTE0PSSKMJ2F6YXW7CBE6YPW",
      "BTC": "12qdRgXxgNBNPnDeEChy3fYTbSHQ8nfZfD"
    }

Command: decrypt_keychain
Usage:
  decrypt_keychain ENCRYPTED_BACKUP_PHRASE [PASSWORD] 
  decrypt_keychain --encrypted_backup_phrase ENCRYPTED_BACKUP_PHRASE
                   [--password PASSWORD]
                   
  Decrypt an encrypted backup phrase with a password. Decrypts to a 12-word 
  backup phrase if done correctly. The password will be prompted if not 
  given. 

  Example: 

    $ # password is "asdf"
    $ blockstack-cli decrypt_keychain "bfMDtOucUGcJXjZo6vkrZWgEzue9fzPsZ7A6Pl4LQuxLI1xsVF0VPgBkMsnSLCmYS5YHh7R3mNtMmX45Bq9sNGPfPsseQMR0fD9XaHi+tBg=
    Enter password:
    section amount spend resemble spray verify night immune tattoo best emotion parrot

Command: docs
Usage:
  docs [FORMAT] 
  docs [--format OUTPUT_FORMAT]
       
  Dump the documentation for all commands as JSON to standard out.

Command: encrypt_keychain
Usage:
  encrypt_keychain BACKUP_PHRASE [PASSWORD] 
  encrypt_keychain --backup_phrase BACKUP_PHRASE
                   [--password PASSWORD]
                   
  Encrypt a 12-word backup phrase, which can be decrypted later with the 
  `decrypt_backup_phrase` command. The password will be prompted if not 
  given. 

  Example: 

     $ # password is "asdf"
     $ blockstack-cli encrypt_keychain "section amount spend resemble spray verify night immune tattoo best emotion parrot"
     Enter password:
     Enter password again:
     M+DnBHYb1fgw4N3oZ+5uTEAua5bAWkgTW/SjmmBhGGbJtjOtqVV+RrLJEJOgT35hBon4WKdGWye2vTdgqDo7+HIobwJwkQtN2YF9g3zPsKk=

Command: gaia_deletefile
Usage:
  gaia_deletefile GAIA_HUB APP_PRIVATE_KEY GAIA_FILENAME [WAS_SIGNED] 
  gaia_deletefile --gaia_hub URL
                  --app_private_key PRIVATE_KEY
                  --gaia_filename FILENAME
                  [--was_signed BOOLEAN]
                  
  Delete a file in a Gaia hub, as well as its signature metadata (which is 
  stored in a separate file). 
  Example: 

    $ # Tip: You can obtain the app key with the get_app_keys command.
    $ export APP_KEY="3ac770e8c3d88b1003bf4a0a148ceb920a6172bdade8e0325a1ed1480ab4fb19"
    $ blockstack-cli gaia_deletefile https://hub.blockstack.org "$APP_KEY" file.txt false
    ok

Command: gaia_dump_bucket
Usage:
  gaia_dump_bucket NAME_OR_ID_ADDRESS APP_ORIGIN GAIA_HUB BACKUP_PHRASE DUMP_DIR 
  gaia_dump_bucket --name_or_id_address NAME_OR_ID_ADDRESS
                   --app_origin URL
                   --gaia_hub URL
                   --backup_phrase 12_WORDS_OR_CIPHERTEXT
                   --dump_dir PATH
                   
  Download the contents of a Gaia hub bucket to a given directory. The 
  `GAIA_HUB` argument must correspond to the *write* endpoint of the Gaia hub 
  -- that is, you should be able to fetch `$GAIA_HUB/hub_info`. If `DUMP_DIR` 
  does not exist, it will be created. 

  Example: 

    $ export BACKUP_PHRASE="section amount spend resemble spray verify night immune tattoo best emotion parrot
    $ blockstack-cli gaia_dump_bucket hello.id.blockstack https://sample.app https://hub.blockstack.org "$BACKUP_PHRASE" ./backups
    Download 3 files...
    Download hello_world to ./backups/hello_world
    Download dir/format to ./backups/dir\x2fformat
    Download /.dotfile to ./backups/\x2f.dotfile
    3

Command: gaia_getfile
Usage:
  gaia_getfile BLOCKSTACK_ID APP_ORIGIN FILENAME [APP_PRIVATE_KEY] [DECRYPT] [VERIFY] 
  gaia_getfile --blockstack_id BLOCKSTACK_ID
               --app_origin URL
               --filename FILENAME
               [--app_private_key PRIVATE_KEY]
               [--decrypt BOOLEAN]
               [--verify BOOLEAN]
               
  Get a file from another user's Gaia hub. Prints the file data to stdout. If 
  you want to read an encrypted file, and/or verify a signed file, then you 
  must pass an app private key, and pass 1 for `DECRYPT` and/or `VERIFY`. If 
  the file is encrypted, and you do not pass an app private key, then this 
  command downloads the ciphertext. If the file is signed, and you want to 
  download its data and its signature, then you must run this command twice 
  -- once to get the file contents at `FILENAME`, and once to get the 
  signature (whose name will be `FILENAME`.sig). 

  Gaia is a key-value store, so it does not have any built-in notion of 
  directories. However, most underlying storage systems do -- directory 
  separators in the name of a file in Gaia may be internally treated as 
  first-class directories (it depends on the Gaia hub's driver).As such, 
  repeated directory separators will be treated as a single directory 
  separator by this command. For example, the file name `a/b.txt`, 
  `/a/b.txt`, and `///a////b.txt` will be treated as identical. 

  Example without encryption: 

    $ # Get an unencrypted, unsigned file
    $ blockstack-cli gaia_getfile ryan.id http://public.ykliao.com statuses.json
    [{"id":0,"text":"Hello, Blockstack!","created_at":1515786983492}]

  Example with encryption: 

    $ # Get an encrypted file without decrypting
    $ blockstack-cli gaia_getfile ryan.id https://app.graphitedocs.com documentscollection.json
        $ # Get an encrypted file, and decrypt it
    $ # Tip: You can obtain the app key with the get_app_keys command
    $ export APP_KEY="3ac770e8c3d88b1003bf4a0a148ceb920a6172bdade8e0325a1ed1480ab4fb19"
    $ blockstack-cli gaia_getfile ryan.id https://app.graphitedocs.com documentscollection.json "$APP_KEY" 1 0

Command: gaia_listfiles
Usage:
  gaia_listfiles GAIA_HUB APP_PRIVATE_KEY 
  gaia_listfiles --gaia_hub URL
                 --app_private_key PRIVATE_KEY
                 
  List all the files in a Gaia hub bucket. You must have the private key for 
  the bucket in order to list its contents. The command prints each file name 
  on its own line, and when finished, it prints the number of files listed. 

  Example: 

    $ # Tip: You can obtain the app key with the get_app_keys command.
    $ export APP_KEY="3ac770e8c3d88b1003bf4a0a148ceb920a6172bdade8e0325a1ed1480ab4fb19"
    $ blockstack-cli gaia_listfiles "https://hub.blockstack.org" "$APP_KEY"
    hello_world
    dir/format
    /.dotfile
    3

Command: gaia_putfile
Usage:
  gaia_putfile GAIA_HUB APP_PRIVATE_KEY DATA_PATH GAIA_FILENAME [ENCRYPT] [SIGN] 
  gaia_putfile --gaia_hub URL
               --app_private_key PRIVATE_KEY
               --data_path PATH
               --gaia_filename FILENAME
               [--encrypt BOOLEAN]
               [--sign BOOLEAN]
               
  Put a file into a given Gaia hub, authenticating with the given app private 
  key. Optionally encrypt and/or sign the data with the given app private 
  key. If the file is successfully stored, this command prints out the URLs 
  at which it can be fetched. 

  Gaia is a key-value store, so it does not have any built-in notion of 
  directories. However, most underlying storage systems do -- directory 
  separators in the name of a file in Gaia may be internally treated as 
  first-class directories (it depends on the Gaia hub's driver).As such, 
  repeated directory separators will be treated as a single directory 
  separator by this command. For example, the file name `a/b.txt`, 
  `/a/b.txt`, and `///a////b.txt` will be treated as identical. 

  Example: 

    $ # Store 4 versions of a file: plaintext, encrypted, signed, and encrypted+signed
    $ # Tip: You can obtain the app key with the get_app_keys command.
    $ export APP_KEY="3ac770e8c3d88b1003bf4a0a148ceb920a6172bdade8e0325a1ed1480ab4fb19"
    $ blockstack-cli gaia_putfile https://hub.blockstack.org "$APP_KEY" /path/to/file.txt file.txt
    {
       "urls": "https://gaia.blockstack.org/hub/19KAzYp4kSKozeAGMUsnuqkEGdgQQLEvwo/file.txt"
    }
    $ blockstack-cli gaia_putfile https://hub.blockstack.org "$APP_KEY" /path/to/file.txt file-encrypted.txt 1
    {
       "urls": "https://gaia.blockstack.org/hub/19KAzYp4kSKozeAGMUsnuqkEGdgQQLEvwo/file-encrypted.txt"
    }
    $ blockstack-cli gaia_putfile https://hub.blockstack.org "$APP_KEY" /path/to/file.txt file-signed.txt 0 1
    {
       "urls": "https://gaia.blockstack.org/hub/19KAzYp4kSKozeAGMUsnuqkEGdgQQLEvwo/file-signed.txt"
    }
    $ blockstack-cli gaia_putfile https://hub.blockstack.org "$APP_KEY" /path/to/file.txt file-encrypted-signed.txt 1 1
    {
       "urls": "https://gaia.blockstack.org/hub/19KAzYp4kSKozeAGMUsnuqkEGdgQQLEvwo/file-encrypted-signed.txt"
    }

Command: gaia_restore_bucket
Usage:
  gaia_restore_bucket NAME_OR_ID_ADDRESS APP_ORIGIN GAIA_HUB BACKUP_PHRASE DUMP_DIR 
  gaia_restore_bucket --name_or_id_address NAME_OR_ID_ADDRESS
                      --app_origin URL
                      --gaia_hub URL
                      --backup_phrase 12_WORDS_OR_CIPHERTEXT
                      --dump_dir PATH
                      
  Upload the contents of a previously-dumped Gaia bucket to a new Gaia hub. 
  The `GAIA_HUB` argument must correspond to the *write* endpoint of the Gaia 
  hub -- that is, you should be able to fetch `$GAIA_HUB/hub_info`. 
  `DUMP_DIR` must contain the file contents created by a previous successful 
  run of the gaia_dump_bucket command, and both `NAME_OR_ID_ADDRESS` and 
  `APP_ORIGIN` must be the same as they were when it was run. 

  Example: 

    $ export BACKUP_PHRASE="section amount spend resemble spray verify night immune tattoo best emotion parrot"
    $ blockstack-cli gaia_restore_bucket hello.id.blockstack https://sample.app https://new.gaia.hub "$BACKUP_PHRASE" ./backups
    Uploaded ./backups/hello_world to https://new.gaia.hub/hub/1Lr8ggSgdmfcb4764woYutUfFqQMjEoKHc/hello_world
    Uploaded ./backups/dir\x2fformat to https://new.gaia.hub/hub/1Lr8ggSgdmfcb4764woYutUfFqQMjEoKHc/dir/format
    Uploaded ./backups/\x2f.dotfile to https://new.gaia.hub/hub/1Lr8ggSgdmfcb4764woYutUfFqQMjEoKHc//.dotfile
    3

Command: gaia_sethub
Usage:
  gaia_sethub BLOCKSTACK_ID OWNER_GAIA_HUB APP_ORIGIN APP_GAIA_HUB BACKUP_PHRASE 
  gaia_sethub --blockstack_id BLOCKSTACK_ID
              --owner_gaia_hub URL
              --app_origin URL
              --app_gaia_hub URL
              --backup_phrase 12_WORDS_OR_CIPHERTEXT
              
  Set the Gaia hub for a particular application for a Blockstack ID. If the 
  command succeeds, the URLs to your updated profile will be printed and your 
  profile will contain an entry in its "apps" key that links the given 
  `APP_ORIGIN` to the given `APP_GAIA_HUB`. 

  NOTE: Both `OWNER_GAIA_HUB` and `APP_GAIA_HUB` must be the *write* 
  endpoints of their respective Gaia hubs. 

  Your 12-word phrase (in either raw or encrypted form) is required to 
  re-sign and store your profile and to generate an app-specific key and Gaia 
  bucket. If you give the encrypted backup phrase, you will be prompted for a 
  password. 

  Example: 

    $ export BACKUP_PHRASE="soap fog wealth upon actual blossom neither timber phone exile monkey vocal"
    $ blockstack-cli gaia_sethub hello_world.id https://hub.blockstack.org https://my.cool.app https://my.app.gaia.hub "$BACKUP_PHRASE"
    {
      "profileUrls": {
        "error": null,
        "dataUrls": [
          "https://gaia.blockstack.org/hub/1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82/profile.json"
        ]
      }
    }

    $ # You can check the new apps entry with curl and jq as follows:
    $ curl -sL https://gaia.blockstack.org/hub/1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82/profile.json | jq ".[0].decodedToken.payload.claim.apps"
    {
      "https://my.cool.app": "https://my.app.gaia.hub/hub/1EqzyQLJ15KG1WQmi5cf1HtmSeqS1Wb8tY/"
    }

Command: get_account_at
Usage:
  get_account_at ADDRESS BLOCKNUMBER 
  get_account_at --address ADDRESS
                 --blocknumber INTEGER
                 
  Query the list of token debits and credits on a given address that occurred 
  at a particular block height. Does not include BTC debits and credits; only 
  Stacks. 

  Example 

    $ blockstack-cli -t get_account_at SP2NTAQFECYGSTE1W47P71FG21H8F00KZZWFGEVKQ 56789
    [
      {
        "debit_value": "0",
        "block_id": 56789
        "lock_transfer_block_id": 0,
        "txid": "291817c78a865c1f72938695218a48174265b2358e89b9448edc89ceefd66aa0",
        "address": "SP2NTAQFECYGSTE1W47P71FG21H8F00KZZWFGEVKQ",
        "credit_value": "1000000000000000000",
        "type": "STACKS",
        "vtxindex": 0
      }
    ]

Command: get_account_history
Usage:
  get_account_history ADDRESS PAGE 
  get_account_history --address ADDRESS
                      --page INTEGER
                      
  Query the history of account debits and credits over a given block range. 
  Returns the history one page at a time. An empty result indicates that the 
  page number has exceeded the number of historic operations in the given 
  block range. 

  Example: 

    $ blockstack-cli get_account_history SP2H7VMY13ESQDAD5808QEY1EMGESMHZWBJRTN2YA 0
    [
      {
        "address": "SP2H7VMY13ESQDAD5808QEY1EMGESMHZWBJRTN2YA",
        "block_id": 56789
        "credit_value": "100000000000",
        "debit_value": "0",
        "lock_transfer_block_id": 0,
        "txid": "0e5db84d94adff5b771262b9df015164703b39bb4a70bf499a1602b858a0a5a1",
        "type": "STACKS",
        "vtxindex": 0
      },
      {
        "address": "SP2H7VMY13ESQDAD5808QEY1EMGESMHZWBJRTN2YA",
        "block_id": 56790,
        "credit_value": "100000000000",
        "debit_value": "64000000000",
        "lock_transfer_block_id": 0,
        "txid": "5a0c67144626f7bd4514e4de3f3bbf251383ca13887444f326bac4bc8b8060ee",
        "type": "STACKS",
        "vtxindex": 1
      },
      {
        "address": "SP2H7VMY13ESQDAD5808QEY1EMGESMHZWBJRTN2YA",
        "block_id": 56791,
        "credit_value": "100000000000",
        "debit_value": "70400000000",
        "lock_transfer_block_id": 0,
        "txid": "e54c271d6a9feb4d1859d32bc99ffd713493282adef5b4fbf50bca9e33fc0ecc",
        "type": "STACKS",
        "vtxindex": 2
      },
      {
        "address": "SP2H7VMY13ESQDAD5808QEY1EMGESMHZWBJRTN2YA",
        "block_id": 56792,
        "credit_value": "100000000000",
        "debit_value": "76800000000",
        "lock_transfer_block_id": 0,
        "txid": "06e0d313261baefec1e59783e256ab487e17e0e776e2fdab0920cc624537e3c8",
        "type": "STACKS",
        "vtxindex": 3
      }
    ]

Command: get_address
Usage:
  get_address PRIVATE_KEY 
  get_address --private_key PRIVATE_KEY
              
  Get the address of a private key or multisig private key bundle. Gives the 
  BTC and STACKS addresses 

  Example: 

    $ blockstack-cli get_address f5185b9ca93bdcb5753fded3b097dab8547a8b47d2be578412d0687a9a0184cb01
    {
      "BTC": "1JFhWyVPpZQjbPcXFtpGtTmU22u4fhBVmq",
      "STACKS": "SP2YM3J4KQK09V670TD6ZZ1XYNYCNGCWCVVKSDFWQ"
    }
    $ blockstack-cli get_address 1,f5185b9ca93bdcb5753fded3b097dab8547a8b47d2be578412d0687a9a0184cb01,ff2ff4f4e7f8a1979ffad4fc869def1657fd5d48fc9cf40c1924725ead60942c01
    {
      "BTC": "363pKBhc5ipDws1k5181KFf6RSxhBZ7e3p",
      "STACKS": "SMQWZ30EXVG6XEC1K4QTDP16C1CAWSK1JSWMS0QN"
    }

Command: get_app_keys
Usage:
  get_app_keys BACKUP_PHRASE NAME_OR_ID_ADDRESS APP_ORIGIN 
  get_app_keys --backup_phrase 12_WORDS_OR_CIPHERTEXT
               --name_or_id_address NAME-OR-ID-ADDRESS
               --app_origin URL
               
  Get the application private key from a 12-word backup phrase and a name or 
  ID-address. This is the private key used to sign data in Gaia, and its 
  address is the Gaia bucket address. If you provide your encrypted backup 
  phrase, you will be asked to decrypt it. If you provide a name instead of 
  an ID-address, its ID-address will be queried automatically (note that this 
  means that the name must already be registered). 

  NOTE: This command does NOT verify whether or not the name or ID-address 
  was created by the backup phrase. You should do this yourself via the 
  `get_owner_keys` command if you are not sure. 

  There are two derivation paths emitted by this command: a `keyInfo` path 
  and a `legacyKeyInfo`path. You should use the one that matches the Gaia hub 
  read URL's address, if you have already signed in before. If not, then you 
  should use the `keyInfo` path when possible. 

  Example: 

    $ export BACKUP_PHRASE="one race buffalo dynamic icon drip width lake extra forest fee kit"
    $ blockstack-cli get_app_keys "$BACKUP_PHRASE" example.id.blockstack https://my.cool.dapp
    {
      "keyInfo": {
        "privateKey": "TODO",
        "address": "TODO"
      },
      "legacyKeyInfo": {
        "privateKey": "90f9ec4e13fb9a00243b4c1510075157229bda73076c7c721208c2edca28ea8b",
        "address": "1Lr8ggSgdmfcb4764woYutUfFqQMjEoKHc"
      },
      "ownerKeyIndex": 0
    }

Command: get_blockchain_history
Usage:
  get_blockchain_history BLOCKSTACK_ID [PAGE] 
  get_blockchain_history --blockstack_id BLOCKSTACK_ID
                         [--page PAGE_NUMBER]
                         
  Get the low-level blockchain-hosted history of operations on a Blockstack 
  ID. This command is used mainly for debugging and diagnostics, and is not 
  guaranteed to be stable across releases.

Command: get_blockchain_record
Usage:
  get_blockchain_record BLOCKSTACK_ID 
  get_blockchain_record --blockstack_id BLOCKSTACK_ID
                        
  Get the low-level blockchain-hosted state for a Blockstack ID. This command 
  is used mainly for debugging and diagnostics. You should not rely on it to 
  be stable.

Command: get_confirmations
Usage:
  get_confirmations TXID 
  get_confirmations --txid TRANSACTION_ID
                    
  Get the block height and number of confirmations for a transaction. 

  Example: 

    $ blockstack-cli get_confirmations e41ce043ab64fd5a5fd382fba21acba8c1f46cbb1d7c08771ada858ce7d29eea
    {
      "blockHeight": 567890,
      "confirmations": 7,
    }

Command: get_did_configuration
Usage:
  get_did_configuration BLOCKSTACK_ID DOMAIN OWNER_KEY 
  get_did_configuration --blockstack_id BLOCKSTACK_ID
                        --domain DOMAIN
                        --owner_key PRIVATE_KEY
                        
  Creates a DID configuration for the given blockstack id and domain to 
  create a link between both.The specification is define by the Decentralized 
  Identity Foundation at https://identity.foundation/specs/did-configuration/ 
  The DID configuration should be placed in the json file 
  ".well_known/did_configuration" 
  Example: 

    $ # Tip: you can get your owner keys from your 12-word backup phrase using the get_owner_keys command.
    $ export PRIVATE_OWNER_KEY="6e50431b955fe73f079469b24f06480aee44e4519282686433195b3c4b5336ef01"
    $ blockstack-cli get_did_configuration public_profile_for_testing.id.blockstack helloblockstack.com PRIVATE_OWNER_KEY
    {
       "entries": [
          {
            "did": "did:stack:v0:SewTRvPZUEQGdr45QvEnVMGHZBhx3FT1Jj-0",
            "jwt": "eyJ0eXAiOiJKV1QiL...."
          }
       ]
    }

  The decoded content of the jwt above is 
    {
       "header": {
          "typ": "JWT", "alg": "ES256K"
       },
       "payload": {
           "iss": "did:stack:v0:SewTRvPZUEQGdr45QvEnVMGHZBhx3FT1Jj-0",
           "domain": "helloblockstack.com",
           "exp": "2020-12-07T13:05:28.375Z"
       },
       "signature": "NDY7ISzgAHKcZDvbxzTxQdVnf6xWMZ46w5vHcDpNx_1Fsyip0M6E6GMq_2YZ-gUcwmwlo8Ag9jgnfOkaBIFpoQ"
    }

Command: get_namespace_blockchain_record
Usage:
  get_namespace_blockchain_record NAMESPACE_ID 
  get_namespace_blockchain_record --namespace_id NAMESPACE_ID
                                  
  Get the low-level blockchain-hosted state for a Blockstack namespace. This 
  command is used mainly for debugging and diagnostics, and is not guaranteed 
  to be stable across releases.

Command: get_owner_keys
Usage:
  get_owner_keys BACKUP_PHRASE [INDEX] 
  get_owner_keys --backup_phrase 12_WORDS_OR_CIPHERTEXT
                 [--index INTEGER]
                 
  Get the list of owner private keys and ID-addresses from a 12-word backup 
  phrase. Pass non-zero values for INDEX to generate the sequence of 
  ID-addresses that can be used to own Blockstack IDs. If you provide an 
  encrypted 12-word backup phrase, you will be asked for your password to 
  decrypt it. 

  Example: 

    $ # get the first 3 owner keys and addresses for a backup phrase
    $ export BACKUP_PHRASE="soap fog wealth upon actual blossom neither timber phone exile monkey vocal"
    $ blockstack-cli get_owner_keys "$BACKUP_PHRASE" 3
    [
      {
        "privateKey": "14b0811d5cd3486d47279d8f3a97008647c64586b121e99862c18863e2a4183501",
        "version": "v0.10-current",
        "index": 0,
        "idAddress": "ID-1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82"
      },
      {
        "privateKey": "1b3572d8dd6866828281ac6cf135f04153210c1f9b123743eccb795fd3095e4901",
        "version": "v0.10-current",
        "index": 1,
        "idAddress": "ID-18pR3UpD1KFrnk88a3MGZmG2dLuZmbJZ25"
      },
      {
        "privateKey": "b19b6d62356db96d570fb5f08b78f0aa7f384525ba3bdcb96fbde29b8e11710d01",
        "version": "v0.10-current",
        "index": 2,
        "idAddress": "ID-1Gx4s7ggkjENw3wSY6bNd1CwoQKk857AqN"
      }
    ]

Command: get_payment_key
Usage:
  get_payment_key BACKUP_PHRASE 
  get_payment_key --backup_phrase 12_WORDS_OR_CIPHERTEXT
                  
  Get the payment private key from a 12-word backup phrase. If you provide an 
  encrypted backup phrase, you will be asked for your password to decrypt it. 
  This command will tell you your Bitcoin and Stacks token addresses as well. 

  Example 

    $ blockstack-cli get_payment_key "soap fog wealth upon actual blossom neither timber phone exile monkey vocal"
    [
      {
        "privateKey": "4023435e33da4aff0775f33e7b258f257fb20ecff039c919b5782313ab73afb401",
        "address": {
          "BTC": "1ybaP1gaRwRSWRE4f8JXo2W8fiTZmA4rV",
          "STACKS": "SP5B89ZJAQHBRXVYP15YB5PAY5E24FEW9K4Q63PE"
        },
        "index": 0
      }
    ]

Command: get_stacks_wallet_key
Usage:
  get_stacks_wallet_key BACKUP_PHRASE 
  get_stacks_wallet_key --backup_phrase 24_WORDS_OR_CIPHERTEXT
                        
  Get the payment private key from a 24-word backup phrase used by the Stacks 
  wallet. If you provide an encrypted backup phrase, you will be asked for 
  your password to decrypt it. This command will tell you your Bitcoin and 
  Stacks token addresses as well. 

  Example 

    $ blockstack-cli get_stacks_payment_key "toast canal educate tissue express melody produce later gospel victory meadow outdoor hollow catch liberty annual gasp hat hello april equip thank neck cruise"
    [
      {
        "privateKey": "a25cea8d310ce656c6d427068c77bad58327334f73e39c296508b06589bc4fa201",
        "address": {
          "BTC": "1ATAW6TAbTCKgU3xPgAcWQwjW9Q26Eambx",
          "STACKS": "SP1KTQR7CTQNA20SV2VNTF9YABMR6RJERSES3KC6Z"
        },
        "index": 0
      }
    ]

Command: get_zonefile
Usage:
  get_zonefile ZONEFILE_HASH 
  get_zonefile --zonefile_hash ZONEFILE_HASH
               
  Get a zone file by hash. 

  Example: 

    $ blockstack-cli get_zonefile ee77ad484b7b229f09461e4c2b6d3bd3e152ba95
    $ORIGIN ryanshea.id
    $TTL 3600
    _http._tcp URI 10 1 "https://gaia.blockstack.org/hub/15BcxePn59Y6mYD2fRLCLCaaHScefqW2No/1/profile.json"

All commands (run '/home/ubuntu/.nvm/versions/node/v14.0.0/bin/blockstack-cli help COMMAND' for details):
  Account Management: 
    balance, convert_address, get_account_history, get_account_at
    send_btc, send_tokens

  Authentication: 
    authenticator

  Blockstack ID Management: 
    renew, register, register_addr, register_subdomain, revoke, transfer
    tx_preorder, tx_register, update

  CLI: 
    docs, help

  DID: 
    get_did_configuration

  Gaia: 
    gaia_dump_bucket, gaia_getfile, gaia_putfile, gaia_deletefile
    gaia_listfiles, gaia_restore_bucket, gaia_sethub

  Key Management: 
    decrypt_keychain, encrypt_keychain, get_address, get_app_keys
    get_owner_keys, get_payment_key, get_stacks_wallet_key
    make_keychain

  Namespace Operations: 
    get_namespace_blockchain_record, name_import, namespace_preorder
    namespace_reveal, namespace_ready, price_namespace

  Peer Services: 
    announce, get_confirmations, get_zonefile, make_zonefile
    zonefile_push

  Profiles: 
    profile_sign, profile_store, profile_verify

  Querying Blockstack IDs: 
    get_blockchain_record, get_blockchain_history, lookup, names, price
    whois

Command: lookup
Usage:
  lookup BLOCKSTACK_ID 
  lookup --blockstack_id BLOCKSTACK_ID
         
  Get and authenticate the profile and zone file for a Blockstack ID. 

  Example: 

    $ blockstack-cli lookup example.id

Command: make_keychain
Usage:
  make_keychain [BACKUP_PHRASE] 
  make_keychain [--backup_phrase 12_WORDS_OR_CIPHERTEXT]
                
  Generate the owner and payment private keys, optionally from a given 
  12-word backup phrase. If no backup phrase is given, a new one will be 
  generated. If you provide your encrypted backup phrase, you will be asked 
  to decrypt it. 

  Example: 

    $ blockstack-cli make_keychain
    {
      "mnemonic": "apart spin rich leader siren foil dish sausage fee pipe ethics bundle",
      "keyInfo": {
        "address": "SP3G19B6J50FH6JGXAKS06N6WA1XPJCKKM4JCHC2D"
        "index": 0,
        "privateKey": "56d30f2b605ed114c7dc45599ae521c525d07e1286fbab67452a6586ea49332a01"
      }
    }

Command: make_zonefile
Usage:
  make_zonefile BLOCKSTACK_ID ID_ADDRESS GAIA_URL_PREFIX [RESOLVER_URL] 
  make_zonefile --blockstack_id BLOCKSTACK_ID
                --id_address ID-ADDRESS
                --gaia_url_prefix URL
                [--resolver_url URL]
                
  Generate a zone file for a Blockstack ID with the given profile URL. If you 
  know the ID-address for the Blockstack ID, the profile URL usually takes 
  the form of: 

     {GAIA_URL_PREFIX}/{ADDRESS}/profile.json

  where `{GAIA_URL_PREFIX}` is the *read* endpoint of your Gaia hub (e.g. 
  https://gaia.blockstack.org/hub) and `{ADDRESS}` is the base58check part of 
  your ID-address (i.e. the string following 'ID-'). 

  Example: 

     $ blockstack-cli make_zonefile example.id ID-1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82 https://my.gaia.hub/hub
     $ORIGIN example.id
     $TTL 3600
     _http._tcp      IN      URI     10      1       "https://my.gaia.hub/hub/1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82/profile.json"

Command: name_import
Usage:
  name_import BLOCKSTACK_ID ID_ADDRESS GAIA_URL_PREFIX REVEAL_KEY [ZONEFILE] [ZONEFILE_HASH] 
  name_import --blockstack_id BLOCKSTACK_ID
              --id_address ID-ADDRESS
              --gaia_url_prefix URL
              --reveal_key PRIVATE_KEY
              [--zonefile PATH]
              [--zonefile_hash ZONEFILE_HASH]
              
  Import a name into a namespace you revealed. The `REVEAL_KEY` must be the 
  same as the key that revealed the namespace. You can only import a name 
  into a namespace if the namespace has not yet been launched (i.e. via 
  `namespace_ready`), and if the namespace was revealed less than a year ago 
  (52595 blocks ago). 

  A zone file will be generated for this name automatically, if "ZONEFILE" is 
  not given. By default, the zone file will have a URL to the name owner's 
  profile prefixed by `GAIA_URL_PREFIX`. If you know the *write* endpoint for 
  the name owner's Gaia hub, you can find out the `GAIA_URL_PREFIX` to use 
  with `curl $GAIA_HUB/hub_info`". 

  If you specify an argument for `ZONEFILE`, then the `GAIA_URL_PREFIX` 
  argument is ignored in favor of your custom zone file on disk. 

  If you specify a valid zone file hash for `ZONEFILE_HASH` then it will be 
  used in favor of both `ZONEFILE` and `GAIA_URL_PREFIX`. The zone file hash 
  will be incorporated directly into the name-import transaction. 

  This command prints out a transaction ID if it succeeds, and it replicates 
  the zone file (if given) to a transaction broadcaster (you can choose which 
  one with -T). The zone file will be automatically broadcast to the 
  Blockstack peer network when the transaction confirms. Alternatively, you 
  can do so yourself with the `zonefile_push` command. 

  Example: 

    $ export REVEAL_KEY="bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401"
    $ export ID_ADDRESS="ID-18e1bqU7B5qUPY3zJgMLxDnexyStTeSnvV"
    $ blockstack-cli name_import example.id "$ID_ADDRESS" https://gaia.blockstack.org/hub "$REVEAL_KEY"
    f726309cea7a9db364307466dc0e0e759d5c0d6bad1405e2fd970740adc7dc45

Command: names
Usage:
  names ID_ADDRESS 
  names --id_address ID-ADDRESS
        
  Get the list of Blockstack IDs owned by an ID-address. 

  Example: 

    $ blockstack-cli names ID-1FpBChfzHG3TdQQRKWAipbLragCUArueG9

Command: namespace_preorder
Usage:
  namespace_preorder NAMESPACE_ID REVEAL_ADDRESS PAYMENT_KEY 
  namespace_preorder --namespace_id NAMESPACE_ID
                     --reveal_address ADDRESS
                     --payment_key PRIVATE_KEY
                     
  Preorder a namespace. This is the first of three steps to creating a 
  namespace. Once this transaction is confirmed, you will need to use the 
  `namespace_reveal` command to reveal the namespace (within 24 hours, or 144 
  blocks).

Command: namespace_ready
Usage:
  namespace_ready NAMESPACE_ID REVEAL_KEY 
  namespace_ready --namespace_id NAMESPACE_ID
                  --reveal_key PRIVATE_KEY
                  
  Launch a revealed namespace. This is the third and final step of creating a 
  namespace. Once launched, you will not be able to import names anymore.

Command: namespace_reveal
Usage:
  namespace_reveal NAMESPACE_ID REVEAL_ADDRESS VERSION LIFETIME COEFFICIENT BASE PRICE_BUCKETS NONALPHA_DISCOUNT NO_VOWEL_DISCOUNT PAYMENT_KEY 
  namespace_reveal --namespace_id NAMESPACE_ID
                   --reveal_address ADDRESS
                   --version 2-BYTE-INTEGER
                   --lifetime 4-BYTE-INTEGER
                   --coefficient 1-BYTE-INTEGER
                   --base 1-BYTE-INTEGER
                   --price_buckets CSV-OF-16-NYBBLES
                   --nonalpha_discount NYBBLE
                   --no_vowel_discount NYBBLE
                   --payment_key PRIVATE_KEY
                   
  Reveal a preordered namespace, and set the price curve and payment options. 
  This is the second of three steps required to create a namespace, and must 
  be done shortly after the associated `namespace_preorder` command.

Command: price
Usage:
  price BLOCKSTACK_ID 
  price --blockstack_id BLOCKSTACK_ID
        
  Get the price of an on-chain Blockstack ID. Its namespace must already 
  exist. 

  Example: 

    $ blockstack-cli price example.id
    {
      "units": "BTC",
      "amount": "5500"
    }

Command: price_namespace
Usage:
  price_namespace NAMESPACE_ID 
  price_namespace --namespace_id NAMESPACE_ID
                  
  Get the price of a namespace. 

  Example: 

    $ # get the price of the .hello namespace
    $ blockstack-cli price_namespace hello
    {
      "units": "BTC",
      "amount": "40000000"
    }

Command: profile_sign
Usage:
  profile_sign PROFILE OWNER_KEY 
  profile_sign --profile PATH
               --owner_key PRIVATE_KEY
               
  Sign a profile on disk with a given owner private key. Print out the signed 
  profile JWT. 

  Example: 

    $ # Tip: you can get the owner key from your 12-word backup phrase using the get_owner_keys command
    $ blockstack-cli profile_sign /path/to/profile.json 0ffd299af9c257173be8486ef54a4dd1373407d0629ca25ca68ff24a76be09fb01

Command: profile_store
Usage:
  profile_store USER_ID PROFILE OWNER_KEY GAIA_HUB 
  profile_store --user_id NAME-OR-ID-ADDRESS
                --profile PATH
                --owner_key PRIVATE_KEY
                --gaia_hub URL
                
  Store a profile on disk to a Gaia hub. `USER_ID` can be either a Blockstack 
  ID or an ID-address. The `GAIA_HUB` argument must be the *write* endpoint 
  for the user's Gaia hub (e.g. https://hub.blockstack.org). You can verify 
  this by ensuring that you can run `curl "$GAIA_HUB/hub_info"` successfully.

Command: profile_verify
Usage:
  profile_verify PROFILE ID_ADDRESS 
  profile_verify --profile PATH
                 --id_address ID-ADDRESS
                 
  Verify a JWT encoding a profile on disk using an ID-address. Prints out the 
  contained profile on success. 

  Example: 

    $ # get the raw profile JWT
    $ curl -sL https://raw.githubusercontent.com/jcnelson/profile/master/judecn.id > /tmp/judecn.id.jwt
    $ # Tip: you can get the ID-address for a name with the "whois" command
    $ blockstack-cli profile_verify /tmp/judecn.id.jwt ID-16EMaNw3pkn3v6f2BgnSSs53zAKH4Q8YJg

Command: register
Usage:
  register BLOCKSTACK_ID OWNER_KEY PAYMENT_KEY GAIA_HUB [ZONEFILE] 
  register --blockstack_id ON-CHAIN-BLOCKSTACK_ID
           --owner_key PRIVATE_KEY
           --payment_key PRIVATE_KEY
           --gaia_hub URL
           [--zonefile PATH]
           
  If you are trying to register a name for a *private key*, use this command. 

  Register a name to a single name-owning private key. After successfully 
  running this command, and after waiting a couple hours, your name will be 
  ready to use and will resolve to a signed empty profile hosted on the given 
  Gaia hub (`GAIA_HUB`). 

  Behind the scenes, this will generate and send two transactions and 
  generate and replicate a zone file with the given Gaia hub URL 
  (`GAIA_HUB`). Note that the `GAIA_HUB` argument must correspond to the 
  *write* endpoint of the Gaia hub (i.e. you should be able to run 'curl 
  "$GAIA_HUB/hub_info"' and get back data). If you are using Blockstack PBC's 
  default Gaia hub, pass "https://hub.blockstack.org" for this argument. 

  By default, this command generates a zone file automatically that points to 
  the Gaia hub's read endpoint (which is queried on-the-fly from `GAIA_HUB`). 
  If you instead want to have a custom zone file for this name, you can 
  specify a path to it on disk with the `ZONEFILE` argument. 

  If this command completes successfully, your name will be ready to use once 
  both transactions have 7+ confirmations. You can use the 
  `get_confirmations` command to track the confirmations on the transaction 
  IDs returned by this command. 

  WARNING: You should *NOT* use the payment private key (`PAYMENT_KEY`) while 
  the name is being confirmed. If you do so, you could double-spend one of 
  the pending transactions and lose your name. 

  Example: 

    $ export OWNER="136ff26efa5db6f06b28f9c8c7a0216a1a52598045162abfe435d13036154a1b01"
    $ export PAYMENT="bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401"
    $ blockstack-cli register example.id "$OWNER" "$PAYMENT" https://hub.blockstack.org
    9bb908bfd4ab221f0829167a461229172184fc825a012c4e551533aa283207b1

Command: register_addr
Usage:
  register_addr BLOCKSTACK_ID ID-ADDRESS PAYMENT_KEY GAIA_URL_PREFIX [ZONEFILE] 
  register_addr --blockstack_id BLOCKSTACK_ID
                --id-address ID-ADDRESS
                --payment_key PRIVATE_KEY
                --gaia_url_prefix URL
                [--zonefile PATH]
                
  If you are trying to register a name for an *ID-address*, use this command. 

  Register a name to someone's ID-address. After successfully running this 
  command and waiting a couple of hours, the name will be registered on-chain 
  and have a zone file with a URL to where the owner's profile should be. 
  This command does NOT generate, sign, or replicate a profile for the 
  name---the name owner will need to do this separately, once the name is 
  registered. 

  Behind the scenes, this command will generate two transactions, and 
  generate and replicate a zone file with the given Gaia hub read URL 
  (`GAIA_URL_PREFIX`). Note that the `GAIA_URL_PREFIX` argument must 
  correspond to the *read* endpoint of the Gaia hub (e.g. if you are using 
  Blockstack PBC's default Gaia hub, this is 
  "https://gaia.blockstack.org/hub"). If you know the *write* endpoint of the 
  name owner's Gaia hub, you can find the right value for `GAIA_URL_PREFIX` 
  by running "curl $GAIA_HUB/hub_info". 

  No profile will be generated or uploaded by this command. Instead, this 
  command generates a zone file that will include the URL to a profile based 
  on the `GAIA_URL_PREFIX` argument. 

  The zone file will be generated automatically from the `GAIA_URL_PREFIX` 
  argument. If you need to use a custom zone file, you can pass the path to 
  it on disk via the `ZONEFILE` argument. 

  If this command completes successfully, the name will be ready to use in a 
  couple of hours---that is, once both transactions have 7+ confirmations. 
  You can use the `get_confirmations` command to track the confirmations. 

  WARNING: You should *NOT* use the payment private key (`PAYMENT_KEY`) while 
  the name is being confirmed. If you do so, you could double-spend one of 
  the pending transactions and lose the name. 

  Example: 

    $ export ID_ADDRESS="ID-18e1bqU7B5qUPY3zJgMLxDnexyStTeSnvV"
    $ export PAYMENT="bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401"
    $ blockstack-cli register_addr example.id "$ID_ADDRESS" "$PAYMENT" https://gaia.blockstack.org/hub

Command: register_subdomain
Usage:
  register_subdomain BLOCKSTACK_ID OWNER_KEY GAIA_HUB REGISTRAR [ZONEFILE] 
  register_subdomain --blockstack_id BLOCKSTACK_ID
                     --owner_key PRIVATE_KEY
                     --gaia_hub URL
                     --registrar URL
                     [--zonefile PATH]
                     
  Register a subdomain. This will generate and sign a subdomain zone file 
  record with the given `GAIA_HUB` URL and send it to the given subdomain 
  registrar (`REGISTRAR`). 

  This command generates, signs, and uploads a profile to the `GAIA_HUB` url. 
  Note that the `GAIA_HUB` argument must correspond to the *write* endpoint 
  of your Gaia hub (i.e. you should be able to run 'curl 
  "$GAIA_HUB/hub_info"' successfully). If you are using Blockstack PBC's 
  default Gaia hub, this argument should be "https://hub.blockstack.org". 

  WARNING: At this time, no validation will occur on the registrar URL. Be 
  sure that the URL corresponds to the registrar for the on-chain name before 
  running this command! 

  Example: 

    $ export OWNER="6e50431b955fe73f079469b24f06480aee44e4519282686433195b3c4b5336ef01"
    $ # NOTE: https://registrar.blockstack.org is the registrar for personal.id!
    $ blockstack-cli register_subdomain hello.personal.id "$OWNER" https://hub.blockstack.org https://registrar.blockstack.org

Command: renew
Usage:
  renew BLOCKSTACK_ID OWNER_KEY PAYMENT_KEY [NEW_ID_ADDRESS] [ZONEFILE] [ZONEFILE_HASH] 
  renew --blockstack_id ON-CHAIN-BLOCKSTACK_ID
        --owner_key PRIVATE_KEY
        --payment_key PRIVATE_KEY
        [--new_id_address ID-ADDRESS]
        [--zonefile PATH]
        [--zonefile_hash ZONEFILE_HASH]
        
  Renew a name. Optionally transfer it to a new owner address 
  (`NEW_ID_ADDRESS`), and optionally load up and give it a new zone file on 
  disk (`ZONEFILE`). If the command succeeds, it prints out a transaction ID. 
  You can use with the `get_confirmations` command to track its confirmations 
  on the underlying blockchain -- once it reaches 7 confirmations, the rest 
  of the Blockstack peer network will process it. 

  If you create a new zonefile for your name, you will need to later use 
  `zonefile_push` to replicate the zone file to the Blockstack peer network 
  once the transaction reaches 7 confirmations. 

  Example: 

    $ # Tip: you can get your owner key from your backup phrase with "get_owner_keys".
    $ # Tip: you can get your payment key from your backup phrase with "get_payment_key".
    $ export OWNER="136ff26efa5db6f06b28f9c8c7a0216a1a52598045162abfe435d13036154a1b01"
    $ export PAYMENT="bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401"
    $ blockstack-cli renew hello_world.id "$OWNER" "$PAYMENT"
    3d8945ce76d4261678d76592b472ed639a10d4298f9d730af4edbbc3ec02882e

    $ # Renew with a new owner
    $ export NEW_OWNER="ID-141BcmFVbEuuMb7Bd6umXyV6ZD1WYomYDE"
    $ blockstack-cli renew hello_world.id "$OWNER" "$PAYMENT" "$NEW_OWNER"
    33865625ef3f1b607111c0dfba9e58604927173bd2e299a343e19aa6d2cfb263

    $ # Renew with a new zone file.
    $ # Tip: you can create a new zonefile with the "make_zonefile" command.
    $ export ZONEFILE_PATH="/path/to/new/zonefile.txt"
    $ blockstack-cli renew hello_world.id "$OWNER" "$PAYMENT" --zonefile "$ZONEFILE_PATH"
    e41ce043ab64fd5a5fd382fba21acba8c1f46cbb1d7c08771ada858ce7d29eea
    $ # wait 7 confirmations
    $ blockstack-cli get_confirmations e41ce043ab64fd5a5fd382fba21acba8c1f46cbb1d7c08771ada858ce7d29eea
    {
      "blockHeight": 567890,
      "confirmations": 7,
    }
    $ blockstack-cli -H https://core.blockstack.org zonefile_push "$ZONEFILE_PATH"
    [
      "https://core.blockstack.org"
    ]

Command: revoke
Usage:
  revoke BLOCKSTACK_ID OWNER_KEY PAYMENT_KEY 
  revoke --blockstack_id ON-CHAIN-BLOCKSTACK_ID
         --owner_key PRIVATE_KEY
         --payment_key PRIVATE_KEY
         
  Revoke a name. This renders it unusable until it expires (if ever). This 
  command prints out the transaction ID if it succeeds. Once the transaction 
  confirms, the name will be revoked by each node in the peer network. This 
  command only works for on-chain names, not subdomains. 

  Example: 

    $ # Tip: you can get your owner and payment keys from your 12-word backup phrase using the get_owner_keys and get_payment_key commands.
    $ export OWNER="6e50431b955fe73f079469b24f06480aee44e4519282686433195b3c4b5336ef01"
    $ export PAYMENT="bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401"
    $ blockstack-cli revoke example.id "$OWNER" "$PAYMENT"
    233b559c97891affa010567bd582110508d0236b4e3f88d3b1d0731629e030b0

Command: send_btc
Usage:
  send_btc RECIPIENT_ADDRESS AMOUNT PAYMENT_KEY 
  send_btc --recipient_address ADDRESS
           --amount SATOSHIS
           --payment_key PRIVATE_KEY
           
  Send some Bitcoin (in satoshis) from a payment key to an address. Up to the 
  given amount will be spent, but likely less---the actual amount sent will 
  be the amount given, minus the transaction fee. For example, if you want to 
  send 10000 satoshis but the transaction fee is 2000 satoshis, then the 
  resulting transaction will send 8000 satoshis to the given address. This is 
  to ensure that this command does not *over*-spend your Bitcoin. If you want 
  to check the amount before spending, pass the `-x` flag to see the raw 
  transaction. 

  If the command succeeds, it prints out the transaction ID. You can track 
  its confirmations with the `get_confirmations` command. 

  Example: 

    $ export PAYMENT="bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401"
    $ blockstack-cli send_btc 18qTSE5PPQmypwKKej7QX5Db2XAttgYeA1 123456 "$PAYMENT"
    c7e239fd24da30e36e011e6bc7db153574a5b40a3a8dc3b727adb54ad038acc5

Command: send_tokens
Usage:
  send_tokens ADDRESS AMOUNT FEE RATE NONCE PAYMENT_KEY [MEMO] 
  send_tokens --address ADDRESS
              --amount INTEGER
              --fee rate INTEGER
              --nonce INTEGER
              --payment_key PRIVATE_KEY
              [--memo STRING]
              
  Send a particular type of tokens to the given `ADDRESS`. Right now, only 
  supported `TOKEN-TYPE` is `STACKS`. Optionally include a memo string 
  (`MEMO`) up to 34 characters long. 

  If the command succeeds, it prints out a transaction ID. You can track the 
  confirmations on the transaction via the `get_confirmations` command. Once 
  the transaction has 7 confirmations, the Blockstack peer network will have 
  processed it, and your payment key balance and recipient balance will be 
  updated. 

  Example: 

    $ # check balances of sender and recipient before sending.
    $ # address of the key below is SP2SC16ASH76GX549PT7J5WQZA4GHMFBKYMBQFF9V
    $ export PAYMENT="bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401"
    $ blockstack-cli balance SP2SC16ASH76GX549PT7J5WQZA4GHMFBKYMBQFF9V
    {
      "STACKS": "10000000"
    }
    $ blockstack-cli balance SP1P10PS2T517S4SQGZT5WNX8R00G1ECTRKYCPMHY
    {
      "STACKS": "0"
    }

    $ # send tokens
    $ blockstack-cli send_tokens SP1P10PS2T517S4SQGZT5WNX8R00G1ECTRKYCPMHY 12345 1 0 "$PAYMENT"
    a9d387a925fb0ba7a725fb1e11f2c3f1647473699dd5a147c312e6453d233456

    $ # wait for transaction to be confirmed

    $ blockstack-cli balance SP2SC16ASH76GX549PT7J5WQZA4GHMFBKYMBQFF9V
    {
      "STACKS": "9987655"
    }
    $ blockstack-cli balance SP1P10PS2T517S4SQGZT5WNX8R00G1ECTRKYCPMHY
    {
      "STACKS": "12345"
    }

Command: transfer
Usage:
  transfer BLOCKSTACK_ID NEW_ID_ADDRESS KEEP_ZONEFILE OWNER_KEY PAYMENT_KEY 
  transfer --blockstack_id ON-CHAIN-BLOCKSTACK_ID
           --new_id_address ID-ADDRESS
           --keep_zonefile TRUE-OR-FALSE
           --owner_key PRIVATE_KEY
           --payment_key PRIVATE_KEY
           
  Transfer a Blockstack ID to a new address (`NEW_ID_ADDRESS`). Optionally 
  preserve its zone file (`KEEP_ZONEFILE`). If the command succeeds, it will 
  print a transaction ID. Once the transaction reaches 7 confirmations, the 
  Blockstack peer network will transfer the Blockstack ID to the new 
  ID-address. You can track the transaction's confirmations with the 
  `get_confirmations` command. 

  NOTE: This command only works for on-chain Blockstack IDs. It does not yet 
  work for subdomains. 

  An ID-address can only own up to 25 Blockstack IDs. In practice, you should 
  generate a new owner key and ID-address for each name you receive (via the 
  `get_owner_keys` command). 

  Example: 

    $ # Tip: you can get your owner key from your backup phrase with "get_owner_keys".
    $ # Tip: you can get your payment key from your backup phrase with "get_payment_key".
    $ export OWNER="136ff26efa5db6f06b28f9c8c7a0216a1a52598045162abfe435d13036154a1b01"
    $ export PAYMENT="bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401"
    $ blockstack-cli transfer example.id ID-1HJA1AJvWef21XbQVL2AcTv71b6JHGPfDX true "$OWNER" "$PAYMENT"
    e09dc158e586d0c09dbcdcba917ec394e6c6ac2b9c91c4b55f32f5973e4f08fc

Command: tx_preorder
Usage:
  tx_preorder BLOCKSTACK_ID ID_ADDRESS PAYMENT_KEY 
  tx_preorder --blockstack_id ON-CHAIN-BLOCKSTACK_ID
              --id_address ID-ADDRESS
              --payment_key PRIVATE_KEY
              
  Generate and send `NAME_PREORDER` transaction, for a Blockstack ID to be 
  owned by a given `ID_ADDRESS`. The name cost will be paid for by the gven 
  `PAYMENT_KEY`. The ID-address should be a never-before-seen address, since 
  it will be used as a salt when generating the name preorder hash. 

  This is a low-level command that only experienced Blockstack developers 
  should use. If you just want to register a name, use the "register" 
  command.

Command: tx_register
Usage:
  tx_register BLOCKSTACK_ID ID_ADDRESS PAYMENT_KEY [ZONEFILE] [ZONEFILE_HASH] 
  tx_register --blockstack_id ON-CHAIN-BLOCKSTACK_ID
              --id_address ID-ADDRESS
              --payment_key PRIVATE_KEY
              [--zonefile PATH]
              [--zonefile_hash ZOENFILE_HASH]
              
  Generate and send a NAME_REGISTRATION transaction, assigning the given 
  `BLOCKSTACK_ID` to the given `ID_ADDRESS`. Optionally pair the Blockstack 
  ID with a zone file (`ZONEFILE`) or the hash of the zone file 
  (`ZONEFILE_HASH`). You will need to push the zone file to the peer network 
  after the transaction confirms (i.e. with `zonefile_push`). 

  This is a low-level command that only experienced Blockstack developers 
  should use. If you just want to register a name, you should use the 
  `register` command.

Command: update
Usage:
  update BLOCKSTACK_ID ZONEFILE OWNER_KEY PAYMENT_KEY [ZONEFILE_HASH] 
  update --blockstack_id ON-CHAIN-BLOCKSTACK_ID
         --zonefile PATH
         --owner_key PRIVATE_KEY
         --payment_key PRIVATE_KEY
         [--zonefile_hash ZONEFILE_HASH]
         
  Update the zonefile for an on-chain Blockstack ID. You can generate a 
  well-formed zone file using the `make_zonefile` command, or you can supply 
  your own. Zone files can be up to 40Kb. Alternatively, if you only want to 
  announce the hash of a zone file (or any arbitrary 20-byte hex string), you 
  can do so by passing a value for `ZONEFILE_HASH`. If `ZONEFILE_HASH` is 
  given, then the value for `ZONEFILE` will be ignored. 

  If this command succeeds, it prints out a transaction ID. Once the 
  transaction has 7 confirmations, the Blockstack peer network will set the 
  name's zone file hash to the `RIPEMD160`(SHA256) hash of the given zone 
  file (or it will simply set it to the hash given in `ZONEFILE_HASH`). 

  Once the transaction confirms, you will need to replicate the zone file to 
  the Blockstack peer network. This can be done with the `zonefile_push` 
  command. Until you do so, no Blockstack clients will be able to obtain the 
  zone file announced by this command. 

  Example: 

    $ # Tip: you can get your owner and payment keys from your 12-word backup phrase using the get_owner_keys and get_payment_key commands.
    $ export OWNER="6e50431b955fe73f079469b24f06480aee44e4519282686433195b3c4b5336ef01"
    $ export PAYMENT="bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401"
    $ # make a new zone file
    $ blockstack-cli make_zonefile example.id ID-1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82 https://my.gaia.hub/hub > /tmp/zonefile.txt

    $ # update the name to reference this new zone file
    $ blockstack-cli update example.id /tmp/zonefile.txt "$OWNER" "$PAYMENT"
    8e94a5b6647276727a343713d3213d587836e1322b1e38bc158406f5f8ebe3fd

    $ # check confirmations
    $ blockstack-cli get_confirmations e41ce043ab64fd5a5fd382fba21acba8c1f46cbb1d7c08771ada858ce7d29eea
    {
      "blockHeight": 567890,
      "confirmations": 7,
    }

    $ # send out the new zone file to a Blockstack peer
    $ blockstack-cli -H https://core.blockstack.org zonefile_push /tmp/zonefile.txt
    [
      "https://core.blockstack.org"
    ]

Command: whois
Usage:
  whois BLOCKSTACK_ID 
  whois --blockstack_id BLOCKSTACK_ID
        
  Look up the zone file and owner of a Blockstack ID. Works with both 
  on-chain and off-chain names. 

  Example: 

    $ blockstack-cli whois example.id
    {
      "address": "1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82",
      "block_renewed_at": 567890,
      "blockchain": "bitcoin",
      "expire_block": 687010,
      "grace_period": false,
      "last_transaction_height": "567891",
      "last_txid": "a564aa482ee43eb2bdfb016e01ea3b950bab0cfa39eace627d632e73c7c93e48",
      "owner_script": "76a9146c1c2fc3cf74d900c51e9b5628205130d7b98ae488ac",
      "renewal_deadline": 692010,
      "resolver": null,
      "status": "registered",
      "zonefile": "$ORIGIN example.id\n$TTL 3600\n_http._tcp URI 10 1 \"https://gaia.blockstack.org/hub/1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82/profile.json\"\n",
      "zonefile_hash": "ae4ee8e7f30aa890468164e667e2c203266f726e"
    }

Command: zonefile_push
Usage:
  zonefile_push ZONEFILE 
  zonefile_push --zonefile PATH
                
  Push a zone file on disk to the Blockstack peer network. The zone file must 
  correspond to a zone file hash that has already been announced. That is, 
  you use this command in conjunction with the `register`, `update`, `renew`, 
  or `name_import` commands. 

  Example: 

    $ blockstack-cli -H https://core.blockstack.org zonefile_push /path/to/zonefile.txt
    [
      "https://core.blockstack.org"
    ]
